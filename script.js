document.addEventListener('DOMContentLoaded', function() {
    const teamMembers = document.querySelectorAll('.team-member');
    const easterEggFoundDiv = document.querySelector('.easter-egg-found');
    const easterEggMessage = document.querySelector('.easter-egg-message');
    const easterEggCounter = document.querySelector('.easter-egg-counter');
    const secretButton = document.querySelector('.secret-button');
    const bars = document.querySelectorAll('.audio-visualizer .bar');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º—ñ–Ω—ñ-–≥—Ä–∏
    const friendImage = document.getElementById('friend-image');
    const effectContainer = document.getElementById('effect-container');
    const reactionText = document.getElementById('reaction-text');
    const punchCount = document.getElementById('punch-count');
    const enduranceProgress = document.getElementById('endurance-progress');
    const gameLevel = document.getElementById('game-level');
    const resetButton = document.getElementById('reset-game');
    const superPunchButton = document.getElementById('super-punch');

    let foundEasterEggs = 0;
    const totalEasterEggs = 7;
    let foundSecrets = new Set();

    // –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –º—ñ–Ω—ñ-–≥—Ä–∏
    let count = 0;
    let endurance = 100;
    let superPunchAvailable = false;
    let gameActive = true;

    // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞—Å—Ö–∞–ª–∫–∏ –∏ –∞—É–¥–∏–æ
    let currentActiveSecret = null;
    let currentAudio = null;

    // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    let messageTimeout = null;

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –º—ñ–Ω—ñ-–≥—Ä–∏ (–≤–∞—à—ñ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ)
    const effects = ['üí•', 'üëä', '‚ö°', 'üí´', 'üòµ', 'üåü', 'üí¢'];
    const reactions = [
        { count: 5, text: "—è —â–∞—Å –±—É–¥—É –º–∞—Ç—é–∫–∞—Ç—å —Ç–≤–æ—é –º–∞–º—É" },
        { count: 10, text: "—è —â–∞—Å –±—É–¥—É –º–∞—Ç—é–∫–∞—Ç—å —Ç–≤–æ—é –º–∞–º—É" },
        { count: 20, text: "—è —â–∞—Å –±—É–¥—É –º–∞—Ç—é–∫–∞—Ç—å —Ç–≤–æ—é –º–∞–º—É" },
        { count: 30, text: "—è —â–∞—Å –±—É–¥—É –º–∞—Ç—é–∫–∞—Ç—å —Ç–≤–æ—é –º–∞–º—É" },
        { count: 40, text: "–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å –ø–∂" },
        { count: 50, text: "—è –Ω–∞—á–∏–Ω–∞. –∑–ª–∏—Ç—Å—è" },
        { count: 60, text: "–º–µ—Å—Ç—å!" },
        { count: 75, text: "—è —â–∞—Å –∑–∞–ø–ª–∞—á—É" },
        { count: 90, text: "—è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª" },
        { count: 100, text: "—Å–¥–∞—é—Å—å" }
    ];

    const levels = [
        { count: 0, name: "–ª–æ—Ö" },
        { count: 10, name: "–Ω–æ–≤–∏—á–æ–∫" },
        { count: 15, name: "—Å—Ä–µ–¥–Ω–∏—á–æ–∫" },
        { count: 20, name: "–ø—Ä–æ" },
        { count: 25, name: "—ç–∫—Å–ø–µ—Ä—Ç" },
        { count: 33, name: "OBLADAET" }
    ];

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –µ—Ñ–µ–∫—Ç—ñ–≤
    function createGameStyles() {
        if (!document.getElementById('game-effects-styles')) {
            const style = document.createElement('style');
            style.id = 'game-effects-styles';
            style.innerHTML = `
                .effect {
                    position: absolute;
                    font-size: 2rem;
                    font-weight: bold;
                    pointer-events: none;
                    z-index: 1000;
                    animation: effectBurst 1s ease-out forwards;
                    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
                }
                
                @keyframes effectBurst {
                    0% {
                        transform: scale(0.5) rotate(0deg);
                        opacity: 1;
                    }
                    50% {
                        transform: scale(1.2) rotate(180deg);
                        opacity: 0.8;
                    }
                    100% {
                        transform: scale(0.8) rotate(360deg) translateY(-50px);
                        opacity: 0;
                    }
                }
                
                .friend-hit {
                    animation: friendShake 0.3s ease-in-out;
                    filter: brightness(1.3) hue-rotate(30deg);
                }
                
                @keyframes friendShake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px) rotate(-2deg); }
                    75% { transform: translateX(5px) rotate(2deg); }
                }
                
                .screen-shake {
                    animation: screenShake 0.5s ease-in-out;
                }
                
                @keyframes screenShake {
                    0%, 100% { transform: translateX(0); }
                    10% { transform: translateX(-5px); }
                    20% { transform: translateX(5px); }
                    30% { transform: translateX(-3px); }
                    40% { transform: translateX(3px); }
                    50% { transform: translateX(-2px); }
                    60% { transform: translateX(2px); }
                    70% { transform: translateX(-1px); }
                    80% { transform: translateX(1px); }
                    90% { transform: translateX(0); }
                }
                
                .reaction-visible {
                    animation: reactionPop 0.5s ease-out;
                    opacity: 1 !important;
                    visibility: visible !important;
                }
                
                @keyframes reactionPop {
                    0% { 
                        transform: scale(0.5) translateY(20px);
                        opacity: 0;
                    }
                    50% { 
                        transform: scale(1.1) translateY(-5px);
                        opacity: 1;
                    }
                    100% { 
                        transform: scale(1) translateY(0);
                        opacity: 1;
                    }
                }
                
                .super-punch-effect {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    width: 100px;
                    height: 100px;
                    border: 3px solid #ff6b35;
                    border-radius: 50%;
                    animation: superPunchRing 0.6s ease-out forwards;
                    pointer-events: none;
                    z-index: 999;
                }
                
                @keyframes superPunchRing {
                    0% {
                        width: 20px;
                        height: 20px;
                        opacity: 1;
                        border-width: 5px;
                    }
                    100% {
                        width: 200px;
                        height: 200px;
                        opacity: 0;
                        border-width: 1px;
                    }
                }
                
                .combo-effect {
                    position: absolute;
                    top: 10px;
                    left: 50%;
                    transform: translateX(-50%);
                    color: #ff6b35;
                    font-size: 1.5rem;
                    font-weight: bold;
                    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
                    animation: comboFloat 2s ease-out forwards;
                    pointer-events: none;
                    z-index: 1001;
                }
                
                @keyframes comboFloat {
                    0% {
                        transform: translateX(-50%) scale(0.5);
                        opacity: 0;
                    }
                    20% {
                        transform: translateX(-50%) scale(1.2);
                        opacity: 1;
                    }
                    100% {
                        transform: translateX(-50%) scale(1) translateY(-30px);
                        opacity: 0;
                    }
                }
                
                .critical-hit {
                    animation: criticalHit 0.8s ease-out;
                }
                
                @keyframes criticalHit {
                    0% { filter: brightness(1) hue-rotate(0deg) saturate(1); }
                    25% { filter: brightness(2) hue-rotate(90deg) saturate(2); }
                    50% { filter: brightness(1.5) hue-rotate(180deg) saturate(1.5); }
                    75% { filter: brightness(2) hue-rotate(270deg) saturate(2); }
                    100% { filter: brightness(1) hue-rotate(360deg) saturate(1); }
                }
                
                .damage-number {
                    position: absolute;
                    color: #ff3030;
                    font-size: 1.8rem;
                    font-weight: bold;
                    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
                    animation: damageNumber 1.2s ease-out forwards;
                    pointer-events: none;
                    z-index: 1002;
                }
                
                @keyframes damageNumber {
                    0% {
                        transform: scale(0.5) translateY(0);
                        opacity: 1;
                    }
                    30% {
                        transform: scale(1.3) translateY(-10px);
                        opacity: 1;
                    }
                    100% {
                        transform: scale(1) translateY(-40px);
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(style);
        }
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∞—É–¥–∏–æ-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    function animateVisualizer() {
        if (bars.length > 0) {
            bars.forEach(bar => {
                const height = Math.floor(Math.random() * 20) + 5;
                bar.style.height = `${height}px`;
            });
        }
    }

    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    setInterval(animateVisualizer, 100);

    // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º—ñ–Ω—ñ-–≥—Ä–∏
    function createEffect(x, y, isSuper = false) {
        if (!effectContainer) return;

        const effectsToUse = isSuper ? ['üí•', 'üî•', '‚ö°', 'üíØ', 'üåü'] : effects;
        const effect = document.createElement('div');
        effect.classList.add('effect');
        effect.textContent = effectsToUse[Math.floor(Math.random() * effectsToUse.length)];
        effect.style.left = x + 'px';
        effect.style.top = y + 'px';

        if (isSuper) {
            effect.style.fontSize = '3rem';
            effect.style.color = '#ff6b35';
        }

        effectContainer.appendChild(effect);

        setTimeout(() => {
            if (effect.parentNode) {
                effect.remove();
            }
        }, 1000);
    }

    function createDamageNumber(x, y, damage) {
        if (!effectContainer) return;

        const damageEl = document.createElement('div');
        damageEl.classList.add('damage-number');
        damageEl.textContent = `-${damage}`;
        damageEl.style.left = x + 'px';
        damageEl.style.top = y + 'px';

        effectContainer.appendChild(damageEl);

        setTimeout(() => {
            if (damageEl.parentNode) {
                damageEl.remove();
            }
        }, 1200);
    }

    function createSuperPunchEffect() {
        if (!friendImage || !effectContainer) return;

        const ring = document.createElement('div');
        ring.classList.add('super-punch-effect');
        effectContainer.appendChild(ring);

        setTimeout(() => {
            if (ring.parentNode) {
                ring.remove();
            }
        }, 600);
    }

    function createComboEffect(comboCount) {
        if (!effectContainer) return;

        const combo = document.createElement('div');
        combo.classList.add('combo-effect');
        combo.textContent = `COMBO x${comboCount}!`;
        effectContainer.appendChild(combo);

        setTimeout(() => {
            if (combo.parentNode) {
                combo.remove();
            }
        }, 2000);
    }

    function checkReactions() {
        for (let reaction of reactions) {
            if (count === reaction.count) {
                showGameReaction(reaction.text);
                break;
            }
        }
    }

    function showGameReaction(text) {
        if (!reactionText) return;

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
        if (reactionText.timeoutId) {
            clearTimeout(reactionText.timeoutId);
        }

        reactionText.textContent = text;
        reactionText.classList.remove('reaction-visible');

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            reactionText.classList.add('reaction-visible');
        }, 50);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 8 —Å–µ–∫—É–Ω–¥)
        reactionText.timeoutId = setTimeout(() => {
            reactionText.classList.remove('reaction-visible');
        }, 8000);
    }

    function updateLevel() {
        if (!gameLevel) return;

        let currentLevel = "–ù–æ–≤–∞—á–æ–∫";

        for (let i = levels.length - 1; i >= 0; i--) {
            if (count >= levels[i].count) {
                currentLevel = levels[i].name;
                break;
            }
        }

        gameLevel.textContent = currentLevel;

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`–°—á–µ—Ç: ${count}, –£—Ä–æ–≤–µ–Ω—å: ${currentLevel}`);
    }

    function addScreenShake() {
        document.body.classList.add('screen-shake');
        setTimeout(() => {
            document.body.classList.remove('screen-shake');
        }, 500);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    function resetMemberEffects(element) {
        element.style.backgroundColor = '';
        element.style.transform = '';
        element.style.boxShadow = '';
        element.style.border = '';
        element.style.background = '';
        element.style.color = '';

        element.classList.remove('shake-animation', 'ipad-rotate', 'revo-mode',
            'dormitory-style', 'dead-inside');

        const p = element.querySelector('p');
        if (p) {
            p.innerHTML = element.getAttribute('data-original-title') || '';
            p.style = '';
        }

        const h2 = element.querySelector('h2');
        if (h2) {
            h2.innerHTML = element.getAttribute('data-original-name') || h2.textContent;
            h2.style = '';
        }

        const overlay = element.querySelector('.overlay');
        if (overlay) {
            overlay.style.background = '';
            overlay.style.opacity = '';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∞—É–¥–∏–æ
    function stopCurrentAudio() {
        if (currentAudio) {
            currentAudio.pause();
            currentAudio.currentTime = 0;
            currentAudio = null;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Å—Ö–∞–ª–æ–∫
    function resetAllActiveSecrets() {
        if (currentActiveSecret) {
            const activeElement = document.querySelector(`[data-secret="${currentActiveSecret}"]`);
            if (activeElement) {
                resetMemberEffects(activeElement);
            }

            document.body.classList.remove('sc-rapper-mode');

            if (document.querySelector('.hidden-crown')) {
                document.querySelector('.hidden-crown').style.display = '';
                document.querySelector('.hidden-crown').style.color = '';
            }

            stopCurrentAudio();
            currentActiveSecret = null;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    teamMembers.forEach(member => {
        const h2 = member.querySelector('h2');
        const p = member.querySelector('p');

        if (h2) member.setAttribute('data-original-name', h2.textContent);
        if (p) member.setAttribute('data-original-title', p.textContent);
    });

    // –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Å—Ö–∞–ª–∫–∏
    const tracks = {
        'music': 'banana_song.mp3',
        'game': 'rage_song.mp3',
        'code': 'revo_hookah_song.mp3',
        'camera': 'ipad_tech_song.mp3',
        'palette': 'obshaga_rap.mp3',
        'bulb': 'dead_inside_song.mp3',
        'footer-secret': 'skrrrt_beat.mp3'
    };

    // –ü–∞—Å—Ö–∞–ª–∫–∏
    const secrets = {
        'music': {
            trigger: 'click',
            message: '–£–£–£–£–£ –ú–ò–ù–¨–û–ù–´ –ë–ê–ù–ê–ù–ê! –¢–†–£–ë–ê–ê–ê–ê,–ë–ï–ù–ï–ù –ö–ò–ù–ìüçåüëë',
            action: function(element) {
                resetAllActiveSecrets();
                const img = element.querySelector('img');
                element.style.backgroundColor = '#FFEB3B';
                const p = element.querySelector('p');
                p.innerHTML = '<span style="font-size: 20px;">üçå BANANA GANG üçå</span>';
                element.style.transform = 'rotate(3deg)';

                const overlay = element.querySelector('.overlay');
                overlay.style.background = 'linear-gradient(to top, rgba(255, 235, 59, 0.8), transparent)';

                playSound(tracks.music);
                return 'music';
            }
        },
        'game': {
            trigger: 'click',
            message: '–°–î–û–•–ù–ò-–°–î–û–•–ù–ò-–°–î–û–•–ù–ò! –°–î–û–•–ù–ò –¢–í–ê–†–¨! –†–ê–ê–ê–ê–ê–ì–ì–ï–ï–ï–ï! üî•üíÄ',
            action: function(element) {
                resetAllActiveSecrets();
                const h2 = element.querySelector('h2');
                h2.innerHTML = '–ü–£–†–ò–ö: <span style="color:red;">–°–î–û–•–ù–ò!!!</span>';
                element.classList.add('shake-animation');
                const p = element.querySelector('p');
                p.innerHTML = '<span style="font-size: 18px;">üíÄ RAGE MACHINE üíÄ</span>';
                element.style.border = '3px solid red';

                const overlay = element.querySelector('.overlay');
                overlay.style.background = 'linear-gradient(to top, rgba(255, 0, 0, 0.5), transparent)';

                playSound(tracks.game);
                return 'game';
            }
        },
        'code': {
            trigger: 'click',
            message: '–°–û–ù–Ø –û–¢–ö–†–´–õ–ê –°–í–û–ô REVO! –û–õ–ï–ì –ë–ï–†–ï–ì–ò–°–¨! üí®üå¨Ô∏è',
            action: function(element) {
                resetAllActiveSecrets();
                element.classList.add('revo-mode');
                const p = element.querySelector('p');
                p.innerHTML = '<span style="font-size: 16px;">üí® REVO HOOKAH QUEEN üí®</span>';
                element.style.transform = 'rotate(-2deg)';

                const overlay = element.querySelector('.overlay');
                overlay.style.background = 'linear-gradient(to top, rgba(75, 0, 130, 0.7), transparent)';
                overlay.style.opacity = '1';

                playSound(tracks.code);
                return 'code';
            }
        },
        'camera': {
            trigger: 'click',
            message: '–∞–π–ø–∞–¥–∏–∫ —Ä–µ–∞–ª—å–Ω—ã–π —Å–≤–∞–≥, –∏–≥—Ä–∞–µ—Ç –≤ –∫–ª–µ—à —Ä–æ—è–ª—å –¥–∞–∂–µ –≤–æ —Å–Ω–µ! üì±‚ú®',
            action: function(element) {
                resetAllActiveSecrets();
                element.classList.add('ipad-rotate');
                element.style.boxShadow = '0 0 20px rgba(0, 195, 255, 0.8)';
                const p = element.querySelector('p');
                p.innerHTML = '<span style="font-size: 16px;">üì± IPAD KID SWAG üì±</span>';

                const overlay = element.querySelector('.overlay');
                overlay.style.background = 'linear-gradient(to top, rgba(0, 122, 255, 0.5), transparent)';

                playSound(tracks.camera);
                return 'camera';
            }
        },
        'palette': {
            trigger: 'click',
            message: '–º–∞–∫—Å–∏–º –¥—Ä–æ–ø–Ω—É–ª –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –ø—Ä–æ –∫—Ä–æ–ª–∏–∫–æ–≤! –î–æ—à–∏—Ä–∞–∫-—Ñ–ª–µ–∫—Å, –¥—É—à —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é, –≤–ø–∏—Å–∫–∏ 24/7! üè†üéµ',
            action: function(element) {
                resetAllActiveSecrets();
                const h2 = element.querySelector('h2');
                h2.innerHTML = '–ú–ê–ö–°–ò–ú –∞.–∫.–∞ BUNNY LOVER';
                element.classList.add('dormitory-style');
                const p = element.querySelector('p');
                p.innerHTML = '<span style="font-size: 16px;">üè† DOSHIRAK GANG üè†</span>';

                const overlay = element.querySelector('.overlay');
                overlay.style.background = 'linear-gradient(to top, rgba(78, 40, 18, 0.7), transparent)';

                playSound(tracks.palette);
                return 'palette';
            }
        },
        'bulb': {
            trigger: 'click',
            message: '–Ω–∏–∫–∏—Ç–∫–∞ ‚Äì –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–∞—Ü–∏–∫! EEEEEEE 2holis! üíÄüé§',
            action: function(element) {
                resetAllActiveSecrets();
                element.classList.add('dead-inside');
                const p = element.querySelector('p');
                p.innerHTML = '<span style="font-size: 18px;">üíÄ DEAD INSIDE 1000-7 üíÄ</span>';
                element.style.background = 'linear-gradient(to bottom, #000, #333)';
                element.style.color = 'white';

                const overlay = element.querySelector('.overlay');
                overlay.style.background = 'linear-gradient(to top, rgba(0, 0, 0, 0.9), rgba(0, 0, 0, 0.5))';
                overlay.style.opacity = '1';

                playSound(tracks.bulb);
                return 'bulb';
            }
        },
        'footer-secret': {
            trigger: 'click',
            message: '–®–ï–ï–ï–®! –¢—ã –Ω–∞—à–µ–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ–∏—à–∫—É! –¢–µ–ø–µ—Ä—å —Å–∞–π—Ç –≤ —Å—Ç–∏–ª–µ –°–ö –†–ï–ü–ï–†–û–í! SKRRRT! üî•üíØ',
            action: function() {
                resetAllActiveSecrets();
                document.body.classList.add('sc-rapper-mode');

                if (document.querySelector('.hidden-crown')) {
                    document.querySelector('.hidden-crown').style.display = 'block';
                    document.querySelector('.hidden-crown').style.color = 'gold';
                }

                bars.forEach(bar => {
                    bar.style.backgroundColor = 'gold';
                });

                playSound(tracks['footer-secret']);
                return 'footer-secret';
            }
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∑–≤—É–∫–∞
    function playSound(soundFile) {
        stopCurrentAudio();
        try {
            currentAudio = new Audio(soundFile);
            currentAudio.volume = 0.3;
            currentAudio.loop = true;

            currentAudio.play().catch(e => {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', e);
            });

            currentAudio.addEventListener('playing', function() {
                document.body.classList.add('music-playing');
            });

        } catch (e) {
            console.log('–ó–≤—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π/—Å–∫—Ä—ã—Ç–æ–π –ø–∞—Å—Ö–∞–ª–∫–µ
    function showEasterEggMessage(message, isFound = true) {
        if (messageTimeout) {
            clearTimeout(messageTimeout);
            messageTimeout = null;
        }

        easterEggMessage.innerHTML = message;

        const heading = easterEggFoundDiv.querySelector('h3');
        if (heading) {
            heading.textContent = isFound ? '–ü–ê–°–•–ê–õ–ö–ê –ù–ê–ô–î–ï–ù–ê!' : '–ü–ê–°–•–ê–õ–ö–ê –°–ö–†–´–¢–ê!';
        }

        ensureAnimationStyles();
        easterEggFoundDiv.style.display = 'none';

        setTimeout(() => {
            easterEggFoundDiv.style.display = 'block';
            easterEggFoundDiv.classList.remove('hidden');
            easterEggFoundDiv.style.animation = 'easterEggSlideUp 0.5s ease-out forwards';

            messageTimeout = setTimeout(() => {
                easterEggFoundDiv.style.animation = 'easterEggSlideDown 0.5s ease-in forwards';
                messageTimeout = setTimeout(() => {
                    easterEggFoundDiv.classList.add('hidden');
                    messageTimeout = null;
                }, 500);
            }, 5000);
        }, 50);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    function ensureAnimationStyles() {
        if (!document.getElementById('easter-egg-animations')) {
            const style = document.createElement('style');
            style.id = 'easter-egg-animations';
            style.innerHTML = `
                @keyframes easterEggSlideUp {
                    from { transform: translate(-50%, 100%); opacity: 0; }
                    to { transform: translate(-50%, 0); opacity: 1; }
                }
                @keyframes easterEggSlideDown {
                    from { transform: translate(-50%, 0); opacity: 1; }
                    to { transform: translate(-50%, 100%); opacity: 0; }
                }
                
                .easter-egg-found {
                    position: fixed;
                    bottom: 30px;
                    left: 50%;
                    transform: translateX(-50%);
                    width: 80%;
                    max-width: 500px;
                    z-index: 1000;
                    background: rgba(10, 10, 10, 0.95);
                    border-radius: 10px;
                    border-left: 5px solid var(--sc-orange);
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
                    overflow: hidden;
                    transform-origin: center bottom;
                    display: block;
                }
                
                .easter-egg-found.hidden {
                    display: none;
                }
                
                .easter-egg-message {
                    font-size: 16px;
                    line-height: 1.4;
                    margin: 10px 0;
                    padding: 0 15px;
                    overflow-wrap: break-word;
                }
            `;
            document.head.appendChild(style);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Å—Ö–∞–ª–æ–∫
    function updateEasterEggCounter() {
        foundEasterEggs = foundSecrets.size;
        easterEggCounter.innerHTML = '';
        easterEggCounter.textContent = foundEasterEggs;

        easterEggCounter.style.animation = 'pulse 0.5s ease';
        setTimeout(() => {
            easterEggCounter.style.animation = '';
        }, 500);

        if (foundEasterEggs === totalEasterEggs) {
            showEasterEggMessage('–®–ï–ï–ï–ï–®! –¢–´ –ù–ê–®–ï–õ –í–°–ï –ü–ê–°–•–ê–õ–ö–ò! –ê–ë–°–û–õ–Æ–¢–ù–´–ô –§–õ–ï–ö–°! üíØüî•üëë', true);
            document.body.classList.add('swag-mode');
            playSpecialSound('victory.mp3');

            bars.forEach(bar => {
                bar.style.backgroundColor = 'gold';
                bar.style.boxShadow = '0 0 10px gold';
            });
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–≤—É–∫–æ–≤
    function playSpecialSound(soundFile) {
        try {
            const audio = new Audio(soundFile);
            audio.volume = 0.3;
            audio.play().catch(e => console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫:', e));
        } catch (e) {
            console.log('–ó–≤—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
    createGameStyles();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞—Å—Ö–∞–ª–æ–∫
    teamMembers.forEach(member => {
        const secret = member.dataset.secret;
        if (secrets[secret]) {
            member.addEventListener('click', function() {
                const isThisActive = currentActiveSecret === secret;

                if (isThisActive) {
                    resetAllActiveSecrets();
                    showEasterEggMessage(`–ü–∞—Å—Ö–∞–ª–∫–∞ —Å–∫—Ä—ã—Ç–∞! –ö–ª–∏–∫–Ω–∏ —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å.`, false);
                } else {
                    const activatedSecret = secrets[secret].action(member);
                    currentActiveSecret = activatedSecret;

                    if (!foundSecrets.has(secret)) {
                        foundSecrets.add(secret);
                        updateEasterEggCounter();
                        showEasterEggMessage(secrets[secret].message, true);

                        bars.forEach(bar => {
                            bar.style.backgroundColor = '#ff5500';
                            setTimeout(() => {
                                if (currentActiveSecret === secret) {
                                    bar.style.backgroundColor = '';
                                }
                            }, 1000);
                        });
                    } else {
                        showEasterEggMessage(`–ü–∞—Å—Ö–∞–ª–∫–∞ "${secret}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`, true);
                    }
                }
            });
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    if (secretButton && secrets['footer-secret']) {
        secretButton.addEventListener('click', function() {
            const isThisActive = currentActiveSecret === 'footer-secret';

            if (isThisActive) {
                resetAllActiveSecrets();
                showEasterEggMessage(`–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`, false);
            } else {
                const activatedSecret = secrets['footer-secret'].action();
                currentActiveSecret = activatedSecret;

                if (!foundSecrets.has('footer-secret')) {
                    foundSecrets.add('footer-secret');
                    updateEasterEggCounter();
                    showEasterEggMessage(secrets['footer-secret'].message, true);
                } else {
                    showEasterEggMessage(`–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ–∏—à–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`, true);
                }
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º—ñ–Ω—ñ-–≥—Ä–∏
    if (friendImage) {
        friendImage.addEventListener('click', function (e) {
            if (!gameActive) return;

            const rect = friendImage.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            count++;
            const damage = Math.floor(Math.random() * 5) + 1;

            if (punchCount) punchCount.textContent = count;

            endurance = Math.max(0, endurance - damage);
            if (enduranceProgress) enduranceProgress.style.width = endurance + '%';

            // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
            friendImage.classList.add('friend-hit');
            setTimeout(() => friendImage.classList.remove('friend-hit'), 300);

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (10% —à–∞–Ω—Å)
            const isCritical = Math.random() < 0.1;
            if (isCritical) {
                friendImage.classList.add('critical-hit');
                setTimeout(() => friendImage.classList.remove('critical-hit'), 800);
                addScreenShake();
            }

            createEffect(x, y, isCritical);
            createDamageNumber(x, y, damage);

            // –ö–æ–º–±–æ —ç—Ñ—Ñ–µ–∫—Ç
            if (count % 10 === 0) {
                createComboEffect(Math.floor(count / 10));
            }

            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            updateLevel();
            checkReactions();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–ø–µ—Ä-—É–¥–∞—Ä–∞
            if (count % 25 === 0) {
                superPunchAvailable = true;
                if (superPunchButton) {
                    superPunchButton.disabled = false;
                    console.log('–°—É–ø–µ—Ä-—É–¥–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω!');
                }
            }

            if (endurance <= 0 && gameActive) {
                gameActive = false;
                showGameReaction("—è...–ø—Ä–æ–∏–≥—Ä–∞–ª?!");
                friendImage.style.filter = 'grayscale(100%)';
            }
        });
    }

    if (superPunchButton) {
        superPunchButton.addEventListener('click', function () {
            console.log('–°—É–ø–µ—Ä-—É–¥–∞—Ä –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!', { superPunchAvailable, gameActive });

            if (!superPunchAvailable || !gameActive) {
                console.log('–°—É–ø–µ—Ä-—É–¥–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
                return;
            }

            count += 10;
            const damage = 15;

            if (punchCount) punchCount.textContent = count;

            endurance = Math.max(0, endurance - damage);
            if (enduranceProgress) enduranceProgress.style.width = endurance + '%';

            if (friendImage) {
                friendImage.classList.add('friend-hit', 'critical-hit');
                setTimeout(() => {
                    friendImage.classList.remove('friend-hit', 'critical-hit');
                }, 800);
            }

            // –°—É–ø–µ—Ä —ç—Ñ—Ñ–µ–∫—Ç—ã
            createSuperPunchEffect();
            addScreenShake();

            for (let i = 0; i < 8; i++) {
                setTimeout(() => {
                    const x = Math.random() * (friendImage?.offsetWidth || 100);
                    const y = Math.random() * (friendImage?.offsetHeight || 100);
                    createEffect(x, y, true);
                }, i * 100);
            }

            // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω
            const centerX = (friendImage?.offsetWidth || 100) / 2;
            const centerY = (friendImage?.offsetHeight || 100) / 2;
            createDamageNumber(centerX, centerY, damage);

            showGameReaction("–£–î–ê–† –°–û –°–ü–ò–ù–´?");

            // –°–±—Ä–æ—Å —Å—É–ø–µ—Ä-—É–¥–∞—Ä–∞
            superPunchAvailable = false;
            superPunchButton.disabled = true;

            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
            updateLevel();
            checkReactions();

            if (endurance <= 0 && gameActive) {
                gameActive = false;
                showGameReaction("—è...–ø—Ä–æ–∏–≥—Ä–∞–ª?");
                if (friendImage) friendImage.style.filter = 'grayscale(100%)';
            }
        });
    }

    if (resetButton) {
        resetButton.addEventListener('click', function () {
            count = 0;
            endurance = 100;
            gameActive = true;
            superPunchAvailable = false;

            if (punchCount) punchCount.textContent = "0";
            if (enduranceProgress) enduranceProgress.style.width = '100%';
            if (gameLevel) gameLevel.textContent = "–Ω–æ–≤–∏—á–æ–∫";
            if (friendImage) friendImage.style.filter = '';
            if (superPunchButton) superPunchButton.disabled = true;

            showGameReaction("–†–ï–í–ê–ù–®!");

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (reactionText) {
                    reactionText.classList.remove('reaction-visible');
                }
            }, 5000);
        });
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    setTimeout(() => {
        document.body.classList.add('init-animation');
        setTimeout(() => {
            document.body.classList.remove('init-animation');
        }, 1000);
    }, 100);
});
// Quiz System (–∑–∞–º—ñ–Ω–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—é –≤–µ—Ä—Å—ñ—é)
const quizData = [
    {
        question: "–ö—Ç–æ —Å –∫–æ–º–∞–Ω–¥—ã –ª—é–±–∏—Ç –º–∏–Ω—å–π–æ–Ω–æ–≤?",
        answers: ["–°–æ–Ω—è", "–ú–∞–∫—Å–∏–º", "–ü—É—Ä–∏–∫", "–û–ª–µ–≥"],
        correct: 3,
        member: "music"
    },
    {
        question: "–ö—Ç–æ —Å–∫–∞–∑–∞–ª –±—ã: '–°–î–û–•–ù–ò –¢–í–ê–†–¨!'?",
        answers: ["–ù–∏–∫–∏—Ç–∞", "–ü—É—Ä—ñ–∫", "–°–æ–Ω—è", "–û–ª–µ–≥"],
        correct: 1,
        member: "game"
    },
    {
        question: "–ö—Ç–æ —Å –∫–æ–º–∞–Ω–¥—ã –µ–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–≤—á–∏–∫–∞–º?",
        answers: ["–ù–∏–∫–∏—Ç–∞", "–°–æ–Ω—è", "–û–ª–µ–≥", "–ú–∞–∫—Å–∏–º"],
        correct: 1,
        member: "code"
    },
    {
        question: "–ö—Ç–æ —Å–∞–º—ã–π –Ω–∏—â—É–∫ –≤ –∫–ª–µ—à —Ä–æ—è–ª–µ?",
        answers: ["–ú–∞–∫—Å–∏–º", "–ê–π–ø–∞–¥", "–û–ª–µ–≥", "–ü—É—Ä—ñ–∫"],
        correct: 1,
        member: "camera"
    },
    {
        question: "–ö—Ç–æ –ª—é–±–∏—Ç–µ–ª—å –∫—Ä–æ–ª–∏–∫–æ–≤?",
        answers: ["–ú–∞–∫—Å–∏–º", "–ê–π–ø–∞–¥", "–ù–∏–∫–∏—Ç–∞", "–ü—É—Ä—ñ–∫"],
        correct: 0,
        member: "palette"
    },
    {
        question: "–ö—Ç–æ —Å–∞–º–∞—è —Ç–æ–ª—Å—Ç–∞—è –¥–µ–≤–æ—á–∫–∞ –≤ –Ω–æ–≤–æ—Å–µ–ª–∏—Ü–µ ?",
        answers: ["–ù–ê–° –ü–ü", "—Å–∞—à–∞–ª–µ—Å–±–∏", "–ª–µ—Ä–∞", "–¥–∞—à–∞–ø–æ–ø"],
        correct: 0,
        member: "bulb"
    },
    {
        question: "–ö–æ–≥–æ —Ö–æ—Ç–µ–ª –±–∏—Ç—å –∞–π—Å–∫—É–±?",
        answers: ["–û–ª–µ–≥", "–ü—É—Ä—ñ–∫", "–°–æ–Ω—è", "–ù–∏–∫–∏—Ç–∞"],
        correct: 0,
        member: "game"
    },
    {
        question: "–£ –∫–æ–≥–æ –¥–æ–º —Å—Ç–∞–ª –Ω–∞—à–∏–º –æ–±—â–∏–º –¥–æ–º–æ–º?",
        answers: ["–ú–∞–∫—Å–∏–º", "–ü—É—Ä—ñ–∫", "–ù—ñ–∫—ñ—Ç–∞", "–û–ª–µ–≥"],
        correct: 2,
        member: "bulb"
    },
    {
        question: "–ö—Ç–æ –∏–∑ –Ω–∞—Å –∫–∞–∂–¥—É—é –≥—É–ª—è–Ω–∫—É –ø–æ–∫—É–ø–∞–µ—Ç –±–µ—Å—Ç—à–æ—Ç?",
        answers: ["–û–ª–µ–≥", "–ù–∏–∫–∏—Ç–∞", "–ú–∞–∫—Å–∏–º", "–ü—É—Ä–∏–∫"],
        correct: 1,
        member: "camera"
    },
    {
        question: "–ö—Ç–æ —Å–ø–∞—Å—ë—Ç —Å–æ–Ω—é –æ—Ç —Ä–µ–≤—á–∏–∫–∞?",
        answers: ["–ú–∞–∫—Å–∏–º", "–û–ª–µ–≥", "–ü—É—Ä–∏–∫", "–ù—ñ–∫—ñ—Ç–∞"],
        correct: 1,
        member: "code"
    }
];

let currentQuizQuestion = 0;
let quizScore = 0;
let quizQuestions = [];
const TOTAL_QUESTIONS = 10;

const quizModal = document.getElementById('team-quiz');
const quizTrigger = document.getElementById('quiz-trigger');
const quizClose = document.querySelector('.quiz-close');
const questionText = document.getElementById('question-text');
const answersContainer = document.getElementById('answers-container');
const scoreDisplay = document.getElementById('score');
const quizResult = document.getElementById('quiz-result');
const finalScore = document.getElementById('final-score');
const restartBtn = document.getElementById('restart-quiz');

// –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–≤—ñ–∑
if (quizTrigger) {
    quizTrigger.addEventListener('click', startQuiz);
}
if (quizClose) {
    quizClose.addEventListener('click', closeQuiz);
}
if (restartBtn) {
    restartBtn.addEventListener('click', startQuiz);
}

if (quizModal) {
    quizModal.addEventListener('click', (e) => {
        if (e.target === quizModal) closeQuiz();
    });
}

function startQuiz() {
    console.log('–ö–≤—ñ–∑ –∑–∞–ø—É—â–µ–Ω–æ!');
    currentQuizQuestion = 0;
    quizScore = 0;
    quizQuestions = shuffleArray([...quizData]).slice(0, TOTAL_QUESTIONS);

    if (quizModal) quizModal.style.display = 'block';
    if (quizResult) quizResult.style.display = 'none';

    const quizGame = document.getElementById('quiz-game');
    if (quizGame) quizGame.style.display = 'block';

    updateQuizScore();
    showQuizQuestion();
}

function closeQuiz() {
    if (quizModal) quizModal.style.display = 'none';
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

function showQuizQuestion() {
    const question = quizQuestions[currentQuizQuestion];
    console.log(`–ü–∏—Ç–∞–Ω–Ω—è ${currentQuizQuestion + 1}:`, question.question);

    if (questionText) {
        questionText.textContent = question.question;
    }

    if (answersContainer) {
        answersContainer.innerHTML = '';

        question.answers.forEach((answer, index) => {
            const btn = document.createElement('button');
            btn.className = 'answer-btn';
            btn.textContent = answer;
            btn.addEventListener('click', () => selectQuizAnswer(index, question.correct));
            answersContainer.appendChild(btn);
        });
    }
}

function selectQuizAnswer(selected, correct) {
    const buttons = document.querySelectorAll('.answer-btn');

    buttons.forEach((btn, index) => {
        btn.disabled = true;
        if (index === correct) {
            btn.classList.add('correct');
        } else if (index === selected && selected !== correct) {
            btn.classList.add('wrong');
        }
    });

    if (selected === correct) {
        quizScore++;
        console.log('–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –†–∞—Ö—É–Ω–æ–∫:', quizScore);
    }

    setTimeout(() => {
        currentQuizQuestion++;
        updateQuizScore();

        if (currentQuizQuestion < TOTAL_QUESTIONS) {
            showQuizQuestion();
        } else {
            showQuizResult();
        }
    }, 1500);
}

function updateQuizScore() {
    if (scoreDisplay) {
        scoreDisplay.textContent = `${quizScore}/${TOTAL_QUESTIONS}`;
        console.log('–û–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫:', `${quizScore}/${TOTAL_QUESTIONS}`);
    }
}

function showQuizResult() {
    console.log('–ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:', quizScore);

    const quizGame = document.getElementById('quiz-game');
    if (quizGame) quizGame.style.display = 'none';
    if (quizResult) quizResult.style.display = 'block';

    let message = '';
    if (quizScore >= 8) message = '–õ–ï–ì–ï–ù–î–ê! –¢–∏ –∑–Ω–∞—î—à –∫–æ–º–∞–Ω–¥—É –∫—Ä–∞—â–µ –≤—Å—ñ—Ö! üèÜ';
    else if (quizScore >= 6) message = '–í—ñ–¥–º—ñ–Ω–Ω–æ! –¢–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –¥—Ä—É–≥ –∫–æ–º–∞–Ω–¥–∏! üåü';
    else if (quizScore >= 4) message = '–ù–µ–ø–æ–≥–∞–Ω–æ! –ê–ª–µ –º–æ–∂–Ω–∞ –∫—Ä–∞—â–µ –≤–∏–≤—á–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É üòä';
    else message = '–¢—Ä–µ–±–∞ –±—ñ–ª—å—à–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –∫–æ–º–∞–Ω–¥–æ—é! üòÖ';

    if (finalScore) {
        finalScore.innerHTML = `<strong>–¢–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${quizScore}/${TOTAL_QUESTIONS}</strong><br><br>${message}`;
    }
}